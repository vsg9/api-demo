plugins {
	id 'org.springframework.boot' version "$springBootVersion"
	id 'io.spring.dependency-management' version "$dependencyManagementVersion"
	id 'java'
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springdoc:springdoc-openapi-ui:$springDocVersion"
	implementation "net.logstash.logback:logstash-logback-encoder:$logbackVersion"
	compile "org.apache.commons:commons-lang3:$commonsLang3Version"
	compileOnly "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.projectlombok:lombok:$lombokVersion"
	testCompileOnly "org.projectlombok:lombok:$lombokVersion"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile 'org.springframework.boot:spring-boot-starter-test'
}

wrapper {
	gradleVersion = "$gradleWrapperVersion"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

processResources {
	filesMatching('application.yml') {
		expand(project.properties)
	}
}

test {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "$jacocoVersion"
}

jacocoTestReport {
	group = "Reporting"
	sourceSets sourceSets.main
	executionData(
			file("${project.buildDir}/jacoco/test.exec")
	)
	reports {
		xml.enabled true
		html.enabled true
		xml.destination file("${buildDir}/jacoco/coverage.xml")
		html.destination file("${buildDir}/jacoco/coverage")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['build/generated/**/*', '**/config/**', '**/model/**', '**/*Config.*', '**/*Dto*.*', '**/*Exception.*'])
		}))
	}
}
